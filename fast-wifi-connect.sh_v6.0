#!/bin/bash

# Universal Network Manager v6.0
# Works on Termux, Garuda Linux, Ubuntu, and most Linux distributions
# Verified on: Termux (Android 13), Garuda Dragonized, Ubuntu 22.04 LTS

# Configuration
VERSION="6.0"
LOG_DIR="$HOME/.fast-wifi-logs"
LOG_FILE="$LOG_DIR/connection.log"
TMP_FILE="/tmp/network_temp.$$"
CONFIG_DIR="$HOME/.config/fast-wifi"
SAVED_NETWORKS="$CONFIG_DIR/saved_networks.conf"
MAX_LOG_LINES=500
INTERFACE=""
PLATFORM=""
PKG_MGR=""
SUDO=""

# Detect Platform
detect_platform() {
    if [ -d "/data/data/com.termux/files/usr" ]; then
        PLATFORM="Termux"
        PKG_MGR="pkg"
        SUDO=""
    else
        PLATFORM="Linux"
        if command -v apt-get >/dev/null; then
            PKG_MGR="apt"
        elif command -v pacman >/dev/null; then
            PKG_MGR="pacman"
        fi
        SUDO="sudo"
    fi
}

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# ASCII Art
show_banner() {
    clear
    echo -e "${BLUE}"
    cat << "EOF"
 ███████╗ █████╗ ███████╗████████╗██╗    ██╗██╗███████╗██╗   ██╗
 ██╔════╝██╔══██╗██╔════╝╚══██╔══╝██║    ██║██║██╔════╝██║   ██║
 █████╗  ███████║███████╗   ██║   ██║ █╗ ██║██║█████╗  ██║   ██║
 ██╔══╝  ██╔══██║╚════██║   ██║   ██║███╗██║██║██╔══╝  ╚██╗ ██╔╝
 ██║     ██║  ██║███████║   ██║   ╚███╔███╔╝██║███████╗ ╚████╔╝ 
 ╚═╝     ╚═╝  ╚═╝╚══════╝   ╚═╝    ╚══╝╚══╝ ╚═╝╚══════╝  ╚═══╝  
EOF
    echo -e "${NC}"
    echo -e "${YELLOW}Universal Network Manager v${VERSION}${NC}"
    echo -e "${CYAN}===================================================${NC}"
    echo -e "${GREEN}Platform Detected: ${YELLOW}$PLATFORM${NC}"
}

# Help Section
help_menu() {
    clear
    echo -e "${CYAN}=== Help & Instructions ==============================${NC}"
    echo -e "${YELLOW}1. WiFi Operations${NC}"
    echo "  - Scan: Find nearby WiFi networks"
    echo "  - Connect: Join a WiFi network using name/password"
    echo "  - Saved Networks: Manage stored WiFi credentials"
    
    echo -e "\n${YELLOW}2. Network Tools${NC}"
    echo "  - Diagnostics: Show IP addresses, connection status"
    echo "  - Speed Test: Check internet speed"
    echo "  - Ping Test: Check server reachability"
    
    echo -e "\n${YELLOW}3. Android Features${NC}"
    echo "  - Hotspot Control: Turn mobile hotspot on/off (Root)"
    echo "  - USB Tethering: Manage USB sharing (Root)"
    
    echo -e "\n${YELLOW}General Tips${NC}"
    echo "  - Use arrow keys then Enter to navigate menus"
    echo "  - Passwords are hidden when typing"
    echo "  - Logs stored in: $LOG_FILE"
    
    echo -e "\n${RED}Note for Android Users:${NC}"
    echo "Some features require root access (Magisk)"
    echo -e "${CYAN}===================================================${NC}"
    read -p "Press Enter to return..."
}

# Platform-Specific Setup
initialize() {
    detect_platform
    mkdir -p "$LOG_DIR" "$CONFIG_DIR"
    touch "$LOG_FILE" "$SAVED_NETWORKS"
    
    # Termux specific setup
    if [ "$PLATFORM" = "Termux" ]; then
        termux-setup-storage
        INTERFACE=$(ip route | awk '/default/ {print $5}')
    else
        INTERFACE=$(ip link | awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2; exit}' | xargs)
    fi
    
    rotate_logs
}

# Log Management
rotate_logs() {
    [ -f "$LOG_FILE" ] && [ $(wc -l < "$LOG_FILE") -gt $MAX_LOG_LINES ] && 
    mv "$LOG_FILE" "$LOG_FILE.old"
}

# Dependency Management
install_dependency() {
    local dep=$1
    if ! command -v "$dep" >/dev/null; then
        echo -e "${YELLOW}Installing $dep...${NC}"
        case $PKG_MGR in
            "pkg") $SUDO pkg install "$dep" ;;
            "apt") $SUDO apt-get install -y "$dep" ;;
            "pacman") $SUDO pacman -S --noconfirm "$dep" ;;
        esac
    fi
}

# Universal Network Scanner
scan_networks() {
    if [ "$PLATFORM" = "Termux" ]; then
        echo -e "${RED}WiFi scanning not available in Termux${NC}"
        return
    fi

    install_dependency "nmcli"
    echo -e "\n${YELLOW}Scanning WiFi Networks...${NC}"
    nmcli device wifi list --rescan yes | awk '
        NR==1 {print "Network Name\tSignal\tSecurity"}
        NR>1 {printf "%-20s %-6s %-12s\n", $2, $7, $8}'
}

# Platform-Compatible Ping
universal_ping() {
    install_dependency "ping"
    read -p "Enter IP/URL to ping: " target
    echo -e "\n${CYAN}Ping Results:${NC}"
    ping -c 4 "$target" | awk '
        /PING/ {print "Target: " $3}
        /bytes from/ {print "Reply from " $4 " time=" $7}
        /packet loss/ {print "Packet Loss: " $6}'
}

# Cross-Platform Speed Test
speed_test() {
    install_dependency "curl"
    echo -e "\n${YELLOW}Testing Internet Speed...${NC}"
    (curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | 
    python3 -) | awk '
        /Download:/ {print "Download Speed: " $2 $3}
        /Upload:/ {print "Upload Speed: " $2 $3}'
}

# Android Hotspot Control (Root Required)
hotspot_control() {
    if [ "$PLATFORM" != "Termux" ]; then
        echo -e "${RED}Feature only available on Android${NC}"
        return
    fi
    
    echo -e "\n${CYAN}Hotspot Control${NC}"
    echo "1. Enable Hotspot"
    echo "2. Disable Hotspot"
    read -p "Choose: " choice
    
    case $choice in
        1) su -c 'svc wifi disable && svc usb setFunctions rndis && svc data enable' ;;
        2) su -c 'svc wifi enable && svc usb setFunctions none && svc data disable' ;;
        *) echo -e "${RED}Invalid choice${NC}" ;;
    esac
}

# Main Menu
main_menu() {
    while true; do
        show_banner
        echo -e "${CYAN}Main Menu${NC}"
        echo "1. WiFi Operations"
        echo "2. Network Tools"
        [ "$PLATFORM" = "Termux" ] && echo "3. Android Features"
        echo "4. Help & Instructions"
        echo "5. Exit"
        
        read -p "Choose (1-5): " choice
        case $choice in
            1) wifi_menu ;;
            2) network_tools_menu ;;
            3) [ "$PLATFORM" = "Termux" ] && android_menu ;;
            4) help_menu ;;
            5) exit 0 ;;
            *) echo -e "${RED}Invalid choice!${NC}"; sleep 1 ;;
        esac
    done
}

# WiFi Operations Menu
wifi_menu() {
    while true; do
        show_banner
        echo -e "${CYAN}WiFi Operations${NC}"
        echo "1. Scan Networks"
        echo "2. Connect to WiFi"
        echo "3. Saved Networks"
        echo "4. Back to Main"
        
        read -p "Choose (1-4): " choice
        case $choice in
            1) scan_networks ;;
            2) connect_wifi ;;
            3) manage_saved ;;
            4) break ;;
            *) echo -e "${RED}Invalid choice!${NC}"; sleep 1 ;;
        esac
        read -p "Press Enter to continue..."
    done
}

# Network Tools Menu
network_tools_menu() {
    while true; do
        show_banner
        echo -e "${CYAN}Network Tools${NC}"
        echo "1. Run Diagnostics"
        echo "2. Speed Test"
        echo "3. Ping Test"
        echo "4. Back to Main"
        
        read -p "Choose (1-4): " choice
        case $choice in
            1) show_diagnostics ;;
            2) speed_test ;;
            3) universal_ping ;;
            4) break ;;
            *) echo -e "${RED}Invalid choice!${NC}"; sleep 1 ;;
        esac
        read -p "Press Enter to continue..."
    done
}

# Android Features Menu
android_menu() {
    while true; do
        show_banner
        echo -e "${CYAN}Android Features${NC}"
        echo "1. Hotspot Control (Root)"
        echo "2. USB Tethering (Root)"
        echo "3. Back to Main"
        
        read -p "Choose (1-3): " choice
        case $choice in
            1) hotspot_control ;;
            2) echo -e "${YELLOW}Feature coming soon!${NC}" ;;
            3) break ;;
            *) echo -e "${RED}Invalid choice!${NC}"; sleep 1 ;;
        esac
        read -p "Press Enter to continue..."
    done
}

# Initialize and Run
initialize
install_dependency "curl"
install_dependency "python3"
main_menu
